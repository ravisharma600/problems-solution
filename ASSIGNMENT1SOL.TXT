1.Sort colors:

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int mid=0,high=nums.size()-1,low=0;
        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums[low],nums[mid]);
                mid++;
                low++;
            }
            else if(nums[mid]==1)
                mid++;
            else if(nums[mid]==2)
            {
                swap(nums[mid],nums[high]);
                    high--;
            }
        }
    }
};

2.Group Anagrams

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
     unordered_map<string,vector<string>>mymap;
    string temp;
    for(int i=0;i<strs.size();i++)
    {
        temp=strs[i];
        sort(strs[i].begin(),strs[i].end());
        mymap[strs[i]].push_back(temp);
    }   
    vector<vector<string>>ans;
    for(auto a=mymap.begin();a!=mymap.end();a++)
    {
        ans.push_back(a->second);
    }
    return ans;
    }
};

3. Single Number III

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        unordered_map<int,int>mymap;
        for(int i=0;i<nums.size();i++)
        {
            mymap[nums[i]]++;
        }
        vector<int>ans;
        for(auto a:mymap)
        {
            if(a.second==1)
            ans.push_back(a.first);
        }
        return ans;
    }
};

4.

class Solution{
    public:
    bool checkIsAP(int arr[], int n)
    {
        sort(arr,arr+n);
        int d=abs(arr[0]-arr[1]);
        for(int i=1;i<n-1;i++)
        {
            if(arr[i+1]-arr[i]!=d)
            return false;
        }
        return true;
        
    }

};